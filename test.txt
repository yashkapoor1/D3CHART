


function updateData(plotChartType) {

    var svgwidth=2880;
    var svgheight=0;
    var stationMargin=240;
    var distanceMargin=120;
    var heightstart=0;
    var heightend=0; 

    var t0 = performance.now();
    //document.getElementById("btnClickToPlot").value = "Please wait...";
    //uncomment to use chart buttons
    changeChartButtonTextAndEnableDisableButtonChart(plotChartType, "Please wait...");			
    //if(isFunctionLoaded == false)
        //{
            var distanceArr = [];
            var stationCode = [];
            var timeLenghtArr = [];
            var trainIdArr = []
            var allTrainLinesCount = 0;
            var arravalTimeSecArr = [];
            var departureTimeSecArr = [];
	
			//create UI
			createLabelAndDropDownForTrainId();
			createLabelAndDropDownForTrainType();
                      
            d3.csv("PlottingDataTest200.csv", function(error, data) {
                data.sort(function(a, b) {
                    return d3.ascending(+a.arrivaltime, +b.arrivaltime);
                });
                    
                data.forEach(function(d) {
                   // alert(formatSeconds(d.arrivaltime))
                   // alert(secondsToHms(d.arrivaltime))
                    d.atinsec=d.arrivaltime;
                    d.dtinsec=d.departuretime;

                    d.dayofrun1=Math.abs((Math.abs(d.arrivaltime/86400))+1);
                    d.dayofrun2=Math.floor((Math.abs(d.departuretime/86400))+1);
                    distanceArr.push(d.distance);
                    d.distance = parseFloat(d.distance);
                    stationCode.push(d.stationcode);				
                    arravalTimeSecArr.push(d.arrivaltime);
                    departureTimeSecArr.push(d.departuretime);
                    d.arrivaltime = d3.timeParse("%I:%M")(secondsToHms(d.arrivaltime));		
                    //d.arrivaltime= d3.timeParse("%I:%M")(secondsToHms(d.arrivaltime>86400? d.arrivaltime-86400:d.arrivaltime));
                    d.departuretime = d3.timeParse("%I:%M")(secondsToHms(d.departuretime));
                    //d.departuretime = d3.timeParse("%I:%M")(secondsToHms(d.departuretime>86400? d.departuretime-86400:d.departuretime));
                    timeLenghtArr.push(d.arrivaltime);
                    d.trainid = d.trainid;
                    trainIdArr.push(d.trainid);

                });
               
            
         


            // Set the dimensions of the canvas / graph
            var margin = {top: 30, right: 20, bottom: 70, left: 0},
                width = 1900 - margin.left - margin.right,
                height = 600 - margin.top - margin.bottom;
            
            var uniqueDistanceArr = d3.set(distanceArr).values();
            var uniqueArrivaltimeArr = d3.set(timeLenghtArr).values();
            var uniqueStationCodeArr = d3.set(stationCode).values();
            var uniqueTrainIdArr = d3.set(trainIdArr).values();
            var newUniqueDistanceForPositionRigthArr = [];
            var differenceBetweenDistanceArr = [];
            
            uniqueDistanceArr
                .sort(function(a, b) {
                    return d3.ascending(+a, +b);
                });
                
            uniqueDistanceArr
                .forEach(function(d, i){
                    differenceBetweenDistanceArr.push(uniqueDistanceArr[i+1]-d);
                    newUniqueDistanceForPositionRigthArr.push(+d + (uniqueDistanceArr[i+1]-d)/2);
                });
                    
            differenceBetweenDistanceArr.pop();
            differenceBetweenDistanceArr.push(0);	
            
            newUniqueDistanceForPositionRigthArr.pop();
            newUniqueDistanceForPositionRigthArr.push(0);
            
            height =(d3.max(uniqueDistanceArr, d=> +d) - d3.min(uniqueDistanceArr, d=> +d)) * 10;
            width = ((d3.max(departureTimeSecArr, d=> +d) - d3.min(arravalTimeSecArr, d=> +d))/3600);
            width = 2880+240;
            
            var svg = d3.select("#divColumnRight")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", 
                      "translate(" + margin.left + "," + margin.top + ")");



                DrawXaxis(svg,height,width);
                DrawYaxis();
                // Define the div for the tooltip
                var div = d3.select("body").append("div")	
                .attr("class", "tooltip")				
                .style("opacity", 0);

                var yscale = d3.scaleLinear()
                .domain([d3.max(data, d => d.distance), d3.min(data, d => d.distance)])	//input
                .range([0, height]);	//output

                function DrawYaxis()
                {
            
                    
               
                    var yscale = d3.scaleLinear()
                    .domain([d3.max(data, d => d.distance), d3.min(data, d => d.distance)])	//input
                    .range([0, height]);	//output
    


                  
                    
                    var yscaleStationCode = d3.scaleLinear()
                    .domain([d3.max(data, s=>s.distance), d3.min(data, s=>s.distance)])
                    .range([0, height]);
                    var y_axis = d3.axisLeft().scale(yscale).tickValues(uniqueDistanceArr).tickFormat(function (d){return d3.format(".2f")(d/1); });
             
     
            
            
             
       
            
                    
            d3.select("#divColumnRight")
                .append("svg")
                .attr("width", 150).attr("height", height + 40)
                .attr("style", "background:white;z-index: 99 !important;")
                .attr("transform", "translate(0, " + (-height-274)  +")")
                .append("svg")
                .attr("id", "gyAxisDistance")
                .append("g")
                .attr("transform", "translate(150, " + 16  +")")
                .attr("class", "grid")
                .call(y_axis);
            
            d3.select("#divColumnRight")
                .append("svg")
                .attr("width", 40).attr("height", height + 40)
                .attr("style", "background:white;z-index: 99 !important;")
                .attr("transform", "translate(-5, " + (-height-284)  +")")
                .append("svg")
                .attr("id", "gyAxisStationCode")
                .append("g")
                .attr("transform", "translate(40, " + 30  +")")
                .selectAll(".text")
                .data(data)
                .enter().append("text")
                .attr("class", "stationcode")
                .attr("y", function(d) { return yscaleStationCode(d.distance); })
                .text(function(d) { return d.stationcode; });
            
            //y axis distance difference right	
            d3.select("#divColumnRight")
                .append("svg")
                .attr("width", 40).attr("height", height + 40)
                .attr("style", "background:white;z-index: 9 !important;")
                .attr("transform", "translate("+(d3.select("#divColumnRight").node().offsetWidth-295)+", " + (-height-284)  +")")
                .append("svg")
                .attr("id", "gyAxisDistanceDifferenceRight")
                .append("g")
                .attr("transform", "translate(37, " + 16  +")")
                .selectAll(".text")
                .data(uniqueDistanceArr)
                .enter().append("text")
                .attr("class", "stationcode")
                .attr("y", function(d, i) { return yscaleStationCode(newUniqueDistanceForPositionRigthArr[i]); })
                .text(function(d, i) { return d3.format(".2f")(differenceBetweenDistanceArr[i]); });
                //.attr("class", "grid")
                //.call();
            
            // y axis station code right
            d3.select("#divColumnRight")
                .append("svg")
                .attr("width", 40).attr("height", height + 40)
                .attr("style", "background:white;z-index: 99 !important;")
               // .attr("transform", "translate("+ (width-230)+", " + (-height-184)  +")")
				.attr("transform", "translate("+ (d3.select("#divColumnRight").node().offsetWidth-295)+", " + (-height-286) +")")
                .append("svg")
                .attr("id", "gyAxisStationCodeRigth")
                .append("g")
                .attr("transform", "translate(40, " + 30  +")")
                .selectAll(".text")
                .data(data)
                .enter().append("text")
                .attr("class", "stationcode")
                .attr("y", function(d) { return yscaleStationCode(d.distance); })
                .text(function(d) { return d.stationcode; });



                // add the Y gridlines  
             svg.append("g")			
             	//.attr("class", "grid")
          		.attr("transform", "translate(193.5," + 10 + ")")
          		.style("stroke-dasharray", ("0.5, 4."))
				.style("stroke-width", 4)
                .call(make_y_gridlines()
               	.tickSize(-width)
                .tickFormat("")
            );
            
         
            
          // gridlines in x axis function (vertical)
         
      
          // gridlines in y axis function (horizontal)
          function make_y_gridlines() { return d3.axisLeft(yscale).tickValues(distanceArr); }}
				
			
            var color = d3.scaleOrdinal(d3.schemeCategory10);

            if(plotChartType == 1)
            {
                allTrainLinesCount = loadChartTrainLine(data,true, true, color, allTrainLinesCount, svg, uniqueTrainIdArr, div,yscale);
            }
            
            changeChartButtonTextAndEnableDisableButtonChart(plotChartType, "Click to Plot ");					
            
            var t1 = performance.now();
            
            alert("Plotting time: " + millisToMinutesAndSeconds(t1 - t0) );
            
            //document.getElementById("btnClickToPlot").hidden = true;
            
            //d3.select("#btnClickToPlot").remove();
            
            // total rows count in csv excel file
            d3.select("#divRowsCount").html('Total Rows Count: ' + data.length);
            
            d3.select("#divAllTrainLinesCount").html('Total Lines Count: ' + allTrainLinesCount);
            
            loadLegend(color);
			
			LoadDropDownFromData(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
			
			LoadDropDownFromCSV();
			
			createButtonLoadTwoCSVFiles(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
			
			createButtonUpDirection(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
			
			createButtonDownDirection(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
			
			//btnLoadTwoCSVFilesClick(data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
        });
        //isFunctionLoaded = true;
        //}
    }
    
    //Functions
    
    function DrawXaxis(svg,height,width)
    {
        var xscale =  d3
                .scaleTime()
                .domain([d3.timeParse("%I:%M")("00:00"), d3.timeParse("%I:%M")("24:00")])
                .range([0, 2880]);

               


                    var x_axisMinuteTop = d3.axisTop()
                    .scale(xscale)
                    .ticks(d3.timeMinute.every(10))
                    .tickFormat(function (d){ 
                        if(d.getMinutes() == 0){ return d3.timeFormat("%H")(d); } 
                        else { return d3.timeFormat("%M")(d); }
                        }).tickSize(0);    
                    
            var x_axisMinuteBottom = d3.axisBottom()
                .scale(xscale)
                .ticks(d3.timeMinute.every(10))
                .tickFormat(function (d){ 
                    if(d.getMinutes() == 0){ return d3.timeFormat("%H")(d); } 
                    else { return d3.timeFormat("%M")(d); }
                    }).tickSize(0);


            var xAxisTranslate = (-height-169);
			
			// div left top 
            d3.select("#divColumnRight")
            .append("div")
            .attr("style", "background:white;z-index: 99 !important;position:fixed;width:189px; height:35px")
            .style("transform", "translate(0px, " + (-height-101)  +"px)");
		
		//div left bottom
			d3.select("#divColumnRight")
	            .append("div")
				.attr("id", "divLeftBottom")
	            .attr("style", "background:white;z-index: 99 !important;position:fixed;width:189px; height:30px")
	            .style("transform", "translate(0px, " + (-height+d3.select("#divColumnRight").node().offsetHeight-150) +"px)");
		
		// bottom right div
				d3.select("#divColumnRight")
		            .append("div")
					.attr("id", "divRightBottom")
		            .attr("style", "background:white;z-index: 9999 !important;position:fixed;width:84px; height:30px")
		            .style("transform", "translate("+(d3.select("#divColumnRight").node().offsetWidth-105)+"px, " + (-height+(d3.select("#divColumnRight").node().offsetHeight)-150) +"px)");
				
				//top right div
				d3.select("#divColumnRight")
		            .append("div")
					.attr("id", "divRightTop")
		            .attr("style", "background:white;z-index: 9999 !important;position:fixed;width:84px; height:30px")
		            .style("transform", "translate("+(d3.select("#divColumnRight").node().offsetWidth-105)+"px, " + (-height-98) +"px)");
            
            d3.select("#divColumnRight")
                .append("svg")
                .attr("width", width).attr("height", 100)
                .attr("style", "background:white;z-index: 99 !important;")
                .attr("transform", "translate(182, " + xAxisTranslate  +")")
                .append("svg")
                .attr("id", "gxAxisTimeTop")
                .append("g")
                .attr("transform", "translate(20, " + 100  +")")
                .call(x_axisMinuteTop)
                .selectAll('text').each(function() {
                    if(this.__data__.getMinutes() == "0")
                    //if(this.textContent)
                    {
                        this.classList.add("hour");
                    }});
                
           
           // To change axisTop to asixBottom
            var xAxisTranslate = -(height)+d3.select("#divColumnRight").node().offsetHeight-250;
			
			d3.select("#divColumnRight")
                .append("svg")
                .attr("width", width).attr("height", 100)
                .attr("style", "background:white;z-index: 9999 !important;")
                .attr("transform", "translate(182, " + xAxisTranslate  +")")
                .append("svg")
                .attr("id", "gxAxisTimeBottom")
                .append("g")
                .attr("transform", "translate(20, " + 10  +")")
                .call(x_axisMinuteBottom)
                .selectAll('text').each(function() {
                    if(this.__data__.getMinutes() == "0")
                    //if(this.textContent)
                    {
                        this.classList.add("hour");
                    }});
		
                    // add the X gridlines
             svg.append("g")			
             .attr("class", "grid")
             .attr("transform", "translate(193," + 0 + ")")
             .call(make_x_gridlines()
                 .tickSize(-height)
                 .tickFormat("")
                 .ticks(d3.timeMinute.every(10))
             )
             
           // add the X gridlines
            svg.append("g")			
             .attr("class", "hourline")
             //to change axistop to axisbottom (top to bottom)
             //.attr("transform", "translate(193," + (height + 10) + ")")
             
             //to change axisBottom to axisTop (Bottom to top)
             .attr("transform", "translate(193," + (0 + 10) + ")")
             .call(make_x_gridlines()
                 .tickSize(-height)
                 .tickFormat("")
                 .ticks(d3.timeHour.every(1))
             )


            function make_x_gridlines() { return d3.axisTop(xscale); }

    }


     function name(params) {
         
     }
   
   
    //Functions
    function secondsToHms(d) {
        d = Number(d);
        var h = Math.floor(d / 3600);
        var m = Math.floor(d % 3600 / 60);
        //var s = Math.floor(d % 3600 % 60);
    
        var hDisplay = h > 0 ? h + (h == 1 ? ":" : ":") : "00:";
        var mDisplay = m > 0 ? m + (m == 1 ? "" : "") : "00";
        //var sDisplay = s > 0 ? s + (s == 1 ? " " : " ") : "";
        return ( hDisplay + mDisplay ); 
    }
    
    function millisToMinutesAndSeconds(millis) {
        var minutes = Math.floor(millis / 60000);
        var seconds = ((millis % 60000) / 1000).toFixed(0);
        return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
    }
    
    function enableDisableButtonChart(disableButtonChart, disableButtonCircle, disableButtonPolyline, disableButtonText,
                                        disableButtonChangeTrainColor)
    {
        d3.select("#btnClickToPlot").node().disabled = disableButtonChart;
        //d3.select("#btnClickToPlotCircle").node().disabled = disableButtonCircle;
        //d3.select("#btnClickToPlotPolyline").node().disabled = disableButtonPolyline;
        //d3.select("#btnClickToPlotText").node().disabled = disableButtonText;
        //d3.select("#btnChangeTrainColor").node().disabled = disableButtonChangeTrainColor;
    }
    
    function changeChartButtonTextAndEnableDisableButtonChart(plotChartType, buttonText)
    {
        var defaultValue = "Please wait...";
        if(plotChartType == 1)
        {
            document.getElementById("btnClickToPlot").innerHTML = buttonText;
            enableDisableButtonChart(true, false, false, false, false);
            
            if(buttonText != defaultValue)
            {
                document.getElementById("btnClickToPlot").value = buttonText + "Chart";
            }
        }
        if(plotChartType == 2)
        {
            document.getElementById("btnClickToPlotCircle").value = buttonText;
            enableDisableButtonChart(false, true, false, false, false);
            
            if(buttonText != defaultValue)
            {
                document.getElementById("btnClickToPlotCircle").value = buttonText + "Circle";
            }
        }
        if(plotChartType == 3)
        {
            document.getElementById("btnClickToPlotPolyline").value = buttonText;
            enableDisableButtonChart(false, false, true, false, false);
            
            if(buttonText != defaultValue)
            {
                document.getElementById("btnClickToPlotPolyline").value = buttonText + "Ployline";
            }
        }
        if(plotChartType == 4)
        {
            document.getElementById("btnClickToPlotText").value = buttonText;
            enableDisableButtonChart(false, false, false, true, false);
            
            if(buttonText != defaultValue)
            {
                document.getElementById("btnClickToPlotText").value = buttonText + "Text";
            }
        }
        if(plotChartType == 5)
        {
            document.getElementById("btnChangeTrainColor").value = buttonText;
            enableDisableButtonChart(false, false, false, false, true);
            
            if(buttonText != defaultValue)
            {
                document.getElementById("btnChangeTrainColor").value = "Change Train Color";
            }
        }
    }
    
    function changeGroupElemntParentElementTransformTranslate(groupElementId, translateX, translateY)
    {
        d3.select(groupElementId).nodes()[0].parentNode.setAttribute("transform", "translate(" + (translateX)  +","+ (translateY)+" )")
    }
    
    function loadLegend(color)
    {
        // set the cold3.schemeCategory10our scale
            //var color = d3.scaleOrdinal(d3.schemeCategory10);
            
        // Vertical Legend//////////////////////////
            var legendVals = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];

            var svgLegned = d3.select("#divColumnLeft").select(".legend").append("svg")
        		.attr('viewBox', '0 0 ' + 160 + ' ' + 200);
            
            var legend = svgLegned.selectAll('.legend')
                .data(legendVals)
                .enter().append('g')
                .attr("class", "legend")
                .attr("transform", function (d, i) {
                {
                    return "translate(0," + i * 20 + ")"
                }
            });
            
            legend.append('rect')
                .attr("x", 0)
                .attr("y", 0)
                .attr("width", 10)
                .attr("height", 10)
                .style("fill", function (d, i) {
                return color(d);
            });
            
            legend.append('text')
                .attr("x", 20)
                .attr("y", 10)
                .style("fill", function(d){ return color(d)})
                //.attr("dy", ".35em")
                .text(function (d, i) {
                    return ("Train Starting With " + d);
                })
                .attr("class", "textselected")
                .style("text-anchor", "start")
                .style("font-size", 12);
    }
    
    function unloadLegend()
    {
        d3.select("#divColumnLeft").select(".legend").select("svg").remove();
    }
    
    function loadChartTrainLine11(a,data, color, allTrainLinesCount, lines, line, svg, uniqueTrainIdArr, div)
    {
            // Nest the entries by symbol
            var dataNest = d3.nest()
                .key(function(d) {return d.trainid;})
                .entries(data);
        
            //legendSpace = width/dataNest.length; // spacing for legend
        
            // Loop through each symbol / key
            dataNest.forEach(function(d,j) {
            //	d.values.sort(function(a, b) {
            //		return d3.descending(+a.distance, +b.distance)
            //	});
            // uncomment to show departure line
            //svg.append("path")
            //    .attr("class", "line")
            //	.attr("transform", "translate(194, 10)")
            //    .style("stroke", function() { // Add the colours dynamically
            //      	return d.color = color(d.key); })
            //    .attr("d", valueline(d.values));
            
            // uncomment to show arrival line	
            //svg.append("path")
            //    .attr("class", "line")
            //	.attr("transform", "translate(194, 10)")
            //    .style("stroke", function() { // Add the colours dynamically
            //       	return d.color = color(d.key); })
            //    .attr("d", valueline2(d.values));
            
            if(d.values.length>1)
            {
            for(i=0;i<d.values.length-1;i++)
                {
                    // Horizontal line
                    lines.push([{ x:d.values[i].arrivaltime, y:d.values[i].distance}, {x:d.values[i].departuretime, y:d.values[i].distance}]);
                    
                    //Vertical lines
                    lines.push([{ x:d.values[i].departuretime, y:d.values[i].distance}, {x:d.values[i+1].arrivaltime, y:d.values[i+1].distance}]);
                }
            }
            else
            {
                lines.push([{ x:d.values[0].arrivaltime, y:d.values[0].distance}, {x:d.values[0].departuretime, y:d.values[0].distance}]);
            }
            
            allTrainLinesCount = allTrainLinesCount + lines.length;
            
            svg.selectAll(".line")
               .data(lines)
               .enter().append("path")
               .attr("class", "line")
               .attr("name", d.key)
               .on("mouseover", function()
               {
                   d3.selectAll(document.getElementsByName(d.key)).style('stroke-width', 6);
        
                    // Specify where to put label of text
                    div.transition()		
                    .duration(200)		
                    .style("opacity", .9);		
                    div.html("Train Number:" + (d.key) + "<br/>" + "Total Distance:" + (d3.format(".2f")((d3.max(d.values, p => p.distance)) - (d3.min(d.values, p => p.distance)))) +
                        "<br/>" + "Train Id:" + d.values[0].trainno)
                    .style("left", (d3.event.pageX) + "px")		
                    .style("top", (d3.event.pageY - 50) + "px");
                })
                .on("mouseout", function()
                {
                    //d3.select(this).style("stroke-width", 1);
                    d3.selectAll(document.getElementsByName(d.key)).style('stroke-width', 1);
                    div.transition()		
                    .duration(500)		
                    .style("opacity", 0);	
                    // Use D3 to select element, change color back to normal
                    //d3.select(this).attr({"stroke-width": 1,
                    //r: radius });
                    //d3.selectAll(document.getElementsByName(d.key)).style('stroke-width', 1);
                    // Select text by id and then remove
                    //d3.select("#t" + d.x + "-" + d.y + "-" + i).remove();  // Remove text location
                })
                .attr("transform", "translate(194, 10)")
                .style("stroke", function() { // Add the colours dynamically
                    return changeChartTrainLineColor(d, color, uniqueTrainIdArr)
                })
               .attr("d", line);
               
            // we can also use mouseourt function that can be passed in mouseout   
            function handleMouseOut(d, i) {
                
              }
                
            // Add the Legend
            //svg.append("text")
             //   .attr("x", (legendSpace/2)+i*legendSpace) // spacing
            //    .attr("y", height + (margin.bottom/2)+ 5)
            //	.attr("transform", "translate(194, 10)")
            //    .attr("class", "legend")    // style the legend
            //    .style("fill", function() { // dynamic colours
            //        return d.color = color(d.key); })
            //    .text(d.key);
            });			
            //d3.select("#btnClickToPlot").node().disabled = true;
            //d3.select("#btnClickToPlot").node().value = "Click To Plot Chart";
            
            return allTrainLinesCount;
    }
    
    function loadChartTrainLine(data, isUpStream, isDownStream, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale){
    	removeTextForPolyLine();
        
        // var yscale = d3.scaleLinear()
        //         .domain([d3.max(data, d => d.distance), d3.min(data, d => d.distance)])	//input
            
        //         .range([3000, 0]);	//output
        
        
        
        var xscale1 =  d3
                .scaleLinear()
                .domain([00, 86400])
                .range([0, 2880]);
            
            // Nest the entries by symbol
            // var dataNest = d3.nest()
            //     .key(function(d) {return d.trainid;}).key(function(d){return d.daysofrun})
            //     .entries(data);
        

                var dataNest = d3.nest()
                .key(function(d) {return d.trainid;})
                .entries(data);

            dataNest.forEach(function(d,j) {
        
            var test1=[];
             var days=1;
            if(d.values.length>1)
            {
				if(isDownStream == true)
				{
				if(d.values[0].distance > d.values[1].distance)
					{
	            for(i=0;i<d.values.length;i++)
	            {                
	                    if(days==d.values[i].dayofrun2)
	                    {
	
	                        test1.push(xscale1(d.values[i].atinsec%86400))
	                        test1.push(yscale(d.values[i].distance))
	                       
	                        test1.push(xscale1(d.values[i].dtinsec%86400))
	                        test1.push(yscale(d.values[i].distance))
	    
	                        
	
	                    }
	                    else
	                    {
	                        test1.push(xscale1(d.values[i].atinsec%88400))
	                        test1.push(yscale(d.values[i].distance))
	                       
	                        test1.push(xscale1(d.values[i].dtinsec%88400))
	                        test1.push(yscale(d.values[i].distance))
	    
	                      //  test1.push(xscale1(d.values[i+1].atinsec%86400))
	                      //  test1.push(yscale(d.values[i+1].distance))
	                        
	            svg.append("polyline")     
	            .style("stroke", "Red")
	                .style("fill", "none")
	            .attr("points",test1 )
	            .on("mousemove", function(){
	                d3.select(this)
	              .style("stroke-width", 5);
	              div.transition()		
	              .duration(200)		
	              .style("opacity", .9);		
	              div.html("Train Number:" + ( d.values[0].trainno) + "<br/>" + "Total Distance:" + (d3.format(".2f")((d3.max(d.values, p => p.distance)) - (d3.min(d.values, p => p.distance)))) +
	                  "<br/>" + "Train Id:" +d.key+ d.values[0].arrivaltime +"<br/>" + "Time:" +(secondsToHms(xscale1.invert(d3.mouse(this)[0]))))
	              .style("left", (d3.event.pageX) + "px")		
	              .style("top", (d3.event.pageY - 50) + "px");
	                })
	                .on("mouseout", function()
	                {
	                    d3.select(this)
	                    .style("stroke-width", 1);
	                    
	                    div.transition()		
	                    .duration(500)		
	                    .style("opacity", 0);	
	                    
	                })
	
	            .attr("transform", "translate(194, 10)")
	            .style("stroke", function() { // Add the colours dynamically
	                return changeChartTrainLineColor(d, color, uniqueTrainIdArr)
	            })
	                        
	                        
	                        
	                        
	                        
	                        
	                        
	                        
	                        
	                        
	                        
	                        
	                        days=days+1;
	                        test1=[];
	
	
	
	
	                        if (d.values[i].dayofrun1 == d.values[i].dayofrun2) { 
	
	                            //var xdistanctemp=d.values[i-1].dtinsec%86400
	                            //var  xdistance=86400-xdistanctemp
	
	                           // test1.push(-xdistance)
	                           // test1.push(yscale(d.values[i-1].distance))
	                          // test1.push(-10)
	                          // test1.push(yscale(d.values[i-1].distance))
	
	                         //  test1.push(xscale1(d.values[i].atinsec%86400))
	                          // test1.push(yscale(d.values[i].distance))
	                            
	                        } else 
	                        {
	                           // test1.push(0)
	                           // test1.push(yscale(d.values[i].distance))// days 2 1st point
	                            
	                        }
	
	                        // test1.push(xscale1(d.values[i].dtinsec%86400))
	                        // test1.push(yscale(d.values[i].distance))
	                       
	                        // test1.push(xscale1(d.values[i].dtinsec%86400))
	                        // test1.push(yscale(d.values[i].distance))
	    
	                        // test1.push(xscale1(d.values[i+1].atinsec%86400))
	                        // test1.push(yscale(d.values[i+1].distance))
	
	
	
	
	
	
	
	                    }
	
	                    
	                
	                   
	                
	                }
	
	                svg.append("polyline")     
	                .style("stroke", "Red")
	                    .style("fill", "none")
	                .attr("points",test1 )
	                .on("mousemove", function(){
	                    d3.select(this)
	                  .style("stroke-width", 5);
	                  div.transition()		
	                  .duration(200)		
	                  .style("opacity", .9);		
	                  div.html("Train Number:" + ( d.values[0].trainno) + "<br/>" + "Total Distance:" + (d3.format(".2f")((d3.max(d.values, p => p.distance)) - (d3.min(d.values, p => p.distance)))) +
	                      "<br/>" + "Train Id:" +d.key+secondsToHms( d.values[0].arrivaltime)+"<br/>" + "Time:" +(secondsToHms(xscale1.invert(d3.mouse(this)[0]))))
	                  .style("left", (d3.event.pageX) + "px")		
	                  .style("top", (d3.event.pageY - 50) + "px");
	                    })
	                    .on("mouseout", function()
	                    {
	                        d3.select(this)
	                        .style("stroke-width", 1);
	                        
	                        div.transition()		
	                        .duration(500)		
	                        .style("opacity", 0);	
	                        
	                    })
	
	                .attr("transform", "translate(194, 10)")
	                .style("stroke", function() { // Add the colours dynamically
	                    return changeChartTrainLineColor(d, color, uniqueTrainIdArr)
	                });
				
					createTextForPolyline(yscale, d.values, svg);
					}
				}
				
		if(isUpStream == true)
		{
		if(d.values[1].distance > d.values[0].distance)
		{
            for(i=0;i<d.values.length;i++)
            {                
                    if(days==d.values[i].dayofrun2)
                    {

                        test1.push(xscale1(d.values[i].atinsec%86400))
                        test1.push(yscale(d.values[i].distance))
                       
                        test1.push(xscale1(d.values[i].dtinsec%86400))
                        test1.push(yscale(d.values[i].distance))
    
                        

                    }
                    else
                    {
                        test1.push(xscale1(d.values[i].atinsec%88400))
                        test1.push(yscale(d.values[i].distance))
                       
                        test1.push(xscale1(d.values[i].dtinsec%88400))
                        test1.push(yscale(d.values[i].distance))
    
                      //  test1.push(xscale1(d.values[i+1].atinsec%86400))
                      //  test1.push(yscale(d.values[i+1].distance))
                        
            svg.append("polyline")     
            .style("stroke", "Red")
                .style("fill", "none")
            .attr("points",test1 )
            .on("mousemove", function(){
                d3.select(this)
              .style("stroke-width", 5);
              div.transition()		
              .duration(200)		
              .style("opacity", .9);		
              div.html("Train Number:" + ( d.values[0].trainno) + "<br/>" + "Total Distance:" + (d3.format(".2f")((d3.max(d.values, p => p.distance)) - (d3.min(d.values, p => p.distance)))) +
                  "<br/>" + "Train Id:" +d.key+ d.values[0].arrivaltime +"<br/>" + "Time:" +(secondsToHms(xscale1.invert(d3.mouse(this)[0]))))
              .style("left", (d3.event.pageX) + "px")		
              .style("top", (d3.event.pageY - 50) + "px");
                })
                .on("mouseout", function()
                {
                    d3.select(this)
                    .style("stroke-width", 1);
                    
                    div.transition()		
                    .duration(500)		
                    .style("opacity", 0);	
                    
                })

            .attr("transform", "translate(194, 10)")
            .style("stroke", function() { // Add the colours dynamically
                return changeChartTrainLineColor(d, color, uniqueTrainIdArr)
            })
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        days=days+1;
                        test1=[];




                        if (d.values[i].dayofrun1 == d.values[i].dayofrun2) { 

                            //var xdistanctemp=d.values[i-1].dtinsec%86400
                            //var  xdistance=86400-xdistanctemp

                           // test1.push(-xdistance)
                           // test1.push(yscale(d.values[i-1].distance))
                          // test1.push(-10)
                          // test1.push(yscale(d.values[i-1].distance))

                         //  test1.push(xscale1(d.values[i].atinsec%86400))
                          // test1.push(yscale(d.values[i].distance))
                            
                        } else 
                        {
                           // test1.push(0)
                           // test1.push(yscale(d.values[i].distance))// days 2 1st point
                            
                        }

                        // test1.push(xscale1(d.values[i].dtinsec%86400))
                        // test1.push(yscale(d.values[i].distance))
                       
                        // test1.push(xscale1(d.values[i].dtinsec%86400))
                        // test1.push(yscale(d.values[i].distance))
    
                        // test1.push(xscale1(d.values[i+1].atinsec%86400))
                        // test1.push(yscale(d.values[i+1].distance))







                    }

                    
                
                   
                
                }


                svg.append("polyline")     
                .style("stroke", "Red")
                    .style("fill", "none")
                .attr("points",test1 )
                .on("mousemove", function(){
                    d3.select(this)
                  .style("stroke-width", 5);
                  div.transition()		
                  .duration(200)		
                  .style("opacity", .9);		
                  div.html("Train Number:" + ( d.values[0].trainno) + "<br/>" + "Total Distance:" + (d3.format(".2f")((d3.max(d.values, p => p.distance)) - (d3.min(d.values, p => p.distance)))) +
                      "<br/>" + "Train Id:" +d.key+secondsToHms( d.values[0].arrivaltime)+"<br/>" + "Time:" +(secondsToHms(xscale1.invert(d3.mouse(this)[0]))))
                  .style("left", (d3.event.pageX) + "px")		
                  .style("top", (d3.event.pageY - 50) + "px");
                    })
                    .on("mouseout", function()
                    {
                        d3.select(this)
                        .style("stroke-width", 1);
                        
                        div.transition()		
                        .duration(500)		
                        .style("opacity", 0);	
                        
                    })

                .attr("transform", "translate(194, 10)")
                .style("stroke", function() { // Add the colours dynamically
                    return changeChartTrainLineColor(d, color, uniqueTrainIdArr)
                });
				createTextForPolyline(yscale, d.values, svg);

            		}
				}
			}


            });			
            //d3.select("#btnClickToPlot").node().disabled = true;
            //d3.select("#btnClickToPlot").node().value = "Click To Plot Chart";
            
            return allTrainLinesCount;
    }

    function loadChartTrainLine121(data, color, allTrainLinesCount, lines, line, svg, uniqueTrainIdArr, div,yscale){
    
        
        // var yscale = d3.scaleLinear()
        //         .domain([d3.max(data, d => d.distance), d3.min(data, d => d.distance)])	//input
            
        //         .range([3000, 0]);	//output
        
        
        
        var xscale1 =  d3
                .scaleLinear()
                .domain([00, 86400])
                .range([0, 2880]);
            
            // Nest the entries by symbol
            var dataNest = d3.nest()
                .key(function(d) {return d.trainid;})
                .entries(data);
        
           
            dataNest.forEach(function(d,j) {
        
            var test1=[];
            if(d.values.length>1)
            {
            for(i=0;i<d.values.length-1;i++)
                {
                    // Horizontal line
                //	lines.push([{ x:d.values[i].arrivaltime, y:d.values[i].distance}, {x:d.values[i].departuretime, y:d.values[i].distance}]);
                    
                    //Vertical lines
                    //lines.push([{ x:d.values[i].departuretime, y:d.values[i].distance}, {x:d.values[i+1].arrivaltime, y:d.values[i+1].distance}]);
                
                    test1.push(xscale1(d.values[i].atinsec))
                    test1.push(yscale(d.values[i].distance))
                   
                    test1.push(xscale1(d.values[i].dtinsec))
                    test1.push(yscale(d.values[i].distance))

                    test1.push(xscale1(d.values[i+1].atinsec))
                    test1.push(yscale(d.values[i+1].distance))
                
                }
            }
            else
            {
                //lines.push([{ x:d.values[0].arrivaltime, y:d.values[0].distance}, {x:d.values[0].departuretime, y:d.values[0].distance}]);
            }
            
            allTrainLinesCount = allTrainLinesCount + lines.length;
        


            svg.append("polyline")     
                .style("stroke", "Red")
                    .style("fill", "none")
                .attr("points",test1 )
               .on("mouseover", function()
               {
                   d3.selectAll(document.getElementsByName(d.key)).style('stroke-width', 6);
        
                    // Specify where to put label of text
                    div.transition()		
                    .duration(200)		
                    .style("opacity", .9);		
                    div.html("Train Number:" + (d.key) + "<br/>" + "Total Distance:" + (d3.format(".2f")((d3.max(d.values, p => p.distance)) - (d3.min(d.values, p => p.distance)))) +
                        "<br/>" + "Train Id:" + d.values[0].trainno+"\n"+d.values[0].arrivaltime)
                    .style("left", (d3.event.pageX) + "px")		
                    .style("top", (d3.event.pageY - 50) + "px");
                })
                .on("mouseout", function()
                {
                    //d3.select(this).style("stroke-width", 1);
                    d3.selectAll(document.getElementsByName(d.key)).style('stroke-width', 1);
                    div.transition()		
                    .duration(500)		
                    .style("opacity", 0);	
                    
                })
                .attr("transform", "translate(194, 10)")
                .style("stroke", function() { // Add the colours dynamically
                    return changeChartTrainLineColor(d, color, uniqueTrainIdArr)
                })

            });			
            //d3.select("#btnClickToPlot").node().disabled = true;
            //d3.select("#btnClickToPlot").node().value = "Click To Plot Chart";
            
            return allTrainLinesCount;
    }


    function loadChartTrainLine111(data, color, allTrainLinesCount, lines, line, svg, uniqueTrainIdArr, div,yscale){
    
        
        // var yscale = d3.scaleLinear()
        //         .domain([d3.max(data, d => d.distance), d3.min(data, d => d.distance)])	//input
            
        //         .range([3000, 0]);	//output
        
        
        
        var xscale1 =  d3
                .scaleLinear()
                .domain([00, 86400])
                .range([0, 2880]);
            
            // Nest the entries by symbol
            // var dataNest = d3.nest()
            //     .key(function(d) {return d.trainid;}).key(function(d){return d.daysofrun})
            //     .entries(data);
        
           

                var dataNest = d3.nest()
                .key(function(d) {return d.trainid;})
                .entries(data);
        

            dataNest.forEach(function(d,j) {

                
        
            var test1=[];
             var days=1;
            if(d.values.length>1)
            {
            for(i=0;i<d.values.length;i++)
            {                
                    if(days==d.values[i].dayofrun2)
                    {

                        test1.push(xscale1(d.values[i].atinsec%86400))
                        test1.push(yscale(d.values[i].distance))
                       
                        test1.push(xscale1(d.values[i].dtinsec%86400))
                        test1.push(yscale(d.values[i].distance))
    
                        

                    }
                    else
                    {
                        test1.push(xscale1(d.values[i].atinsec%88400))
                        test1.push(yscale(d.values[i].distance))
                       
                        test1.push(xscale1(d.values[i].dtinsec%88400))
                        test1.push(yscale(d.values[i].distance))
    
                      //  test1.push(xscale1(d.values[i+1].atinsec%86400))
                      //  test1.push(yscale(d.values[i+1].distance))
                        
            svg.append("polyline")     
            .style("stroke", "Red")
                .style("fill", "none")
            .attr("points",test1 )
            .on("mouseover", function(){
                d3.select(this)
              .style("stroke-width", 5);
              div.transition()		
              .duration(200)		
              .style("opacity", .9);		
              div.html("Train Number:" + ( d.values[0].trainno) + "<br/>" + "Total Distance:" + (d3.format(".2f")((d3.max(d.values, p => p.distance)) - (d3.min(d.values, p => p.distance)))) +
                  "<br/>" + "Train Id:" +d.key+ d.values[0].arrivaltime)
              .style("left", (d3.event.pageX) + "px")		
              .style("top", (d3.event.pageY - 50) + "px");
                })
                .on("mouseout", function()
                {
                    d3.select(this)
                    .style("stroke-width", 1);
                    
                    div.transition()		
                    .duration(500)		
                    .style("opacity", 0);	
                    
                })

            .attr("transform", "translate(194, 10)")
            .style("stroke", function() { // Add the colours dynamically
                return changeChartTrainLineColor(d, color, uniqueTrainIdArr)
            })
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        days=days+1;
                        test1=[];




                        if (d.values[i].dayofrun1 == d.values[i].dayofrun2) { 

                            //var xdistanctemp=d.values[i-1].dtinsec%86400
                            //var  xdistance=86400-xdistanctemp

                           // test1.push(-xdistance)
                           // test1.push(yscale(d.values[i-1].distance))
                          // test1.push(-10)
                          // test1.push(yscale(d.values[i-1].distance))

                         //  test1.push(xscale1(d.values[i].atinsec%86400))
                          // test1.push(yscale(d.values[i].distance))
                            
                        } else 
                        {
                           // test1.push(0)
                           // test1.push(yscale(d.values[i].distance))// days 2 1st point
                            
                        }

                        // test1.push(xscale1(d.values[i].dtinsec%86400))
                        // test1.push(yscale(d.values[i].distance))
                       
                        // test1.push(xscale1(d.values[i].dtinsec%86400))
                        // test1.push(yscale(d.values[i].distance))
    
                        // test1.push(xscale1(d.values[i+1].atinsec%86400))
                        // test1.push(yscale(d.values[i+1].distance))







                    }

                    
                
                   
                
                }


                svg.append("polyline")     
                .style("stroke", "Red")
                    .style("fill", "none")
                .attr("points",test1 )
                .on("mouseover", function(){
                    d3.select(this)
                  .style("stroke-width", 5);
                  div.transition()		
                  .duration(200)		
                  .style("opacity", .9);		
                  div.html("Train Number:" + ( d.values[0].trainno) + "<br/>" + "Total Distance:" + (d3.format(".2f")((d3.max(d.values, p => p.distance)) - (d3.min(d.values, p => p.distance)))) +
                      "<br/>" + "Train Id:" +d.key+secondsToHms( d.values[0].arrivaltime))
                  .style("left", (d3.event.pageX) + "px")		
                  .style("top", (d3.event.pageY - 50) + "px");
                    })
                    .on("mouseout", function()
                    {
                        d3.select(this)
                        .style("stroke-width", 1);
                        
                        div.transition()		
                        .duration(500)		
                        .style("opacity", 0);	
                        
                    })

                .attr("transform", "translate(194, 10)")
                .style("stroke", function() { // Add the colours dynamically
                    return changeChartTrainLineColor(d, color, uniqueTrainIdArr)
                })


                



            }
            
            
            
        



            });			
            //d3.select("#btnClickToPlot").node().disabled = true;
            //d3.select("#btnClickToPlot").node().value = "Click To Plot Chart";
            
            return allTrainLinesCount;
    }
    
    function changeChartTrainLineColor(d, color, uniqueTrainIdArr)
    {
        if	(uniqueTrainIdArr.filter(a => a.startsWith("0")).filter(s=>s==d.key).length > 0)
        {
            return d.color = color(0);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("1")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(1);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("2")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(2);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("3")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(3);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("4")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(4);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("5")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(5);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("6")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(6);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("7")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(7);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("8")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(8);
        }
        if	(uniqueTrainIdArr.filter(a => a.startsWith("9")).filter(s=>s==d.key).length > 0)
        {
              return d.color = color(9);
        }	
    }
    
    function unloadTrainChartSvgAndDiv()
    {
        d3.select("#divColumnRight").selectAll("svg").remove();
        d3.select("#divColumnRight").select("div").remove();
    }
    function downloadChartAsPDF()
	{
  		html2canvas(document.querySelector("#divColumnRight"))
			.then(canvas => {  
    			var dataURL = canvas.toDataURL();
    			var pdf = new jsPDF({ orientation: 'landscape'});
    			pdf.addImage(dataURL, 'JPEG', 0, 0, 240, 120); //addImage(image, format, x-coordinate, y-coordinate, width, height)
    			pdf.save("Test.pdf");
  			});
	}
	
	function testM()
	{
		alert("Under Construction, comming soon...");
	}
	
	function testC()
	{
		alert("Under Construction, comming soon...");
	}
	
	function testD()
	{
		alert("Under Construction, comming soon...");
	}
	
	function testK()
	{
		alert("Under Construction, comming soon...");
	}
	
	function testH()
	{
		alert("Under Construction, comming soon...");
	}
	
	function testB()
	{
		alert("Under Construction, comming soon...");
	}
	
	function testP()
	{
		alert("Under Construction, comming soon...");
	}
	
	function testA()
	{
		alert("Under Construction, comming soon...");
	}
	
	function LoadDropDownFromData(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale)
	{
		//d3.select("#divColumnLeft").append("label").attr("for", "trainid").text("Train Id:  ");
		d3.select("#selectTrainId")
      		.selectAll('myOptions')
     		.data(uniqueTrainIdArr)
      		.enter()
    		.append('option')
      		.text(function (d) { return d; }) // text showed in the menu
      		.attr("value", function (d) { return d; }); // corresponding value returned by the button
			
		// When the button is changed, run the updateChart function
    	d3.select("#selectTrainId").on("change", function(d) {
    	// recover the option that has been chosen
    	var selectedOption = d3.select(this).property("value");
		
		removePolyline();
    	// run the updateChart function with this selected option
		var selectedTrainIdData = data.filter(k=>k.trainid ==selectedOption);
    	loadChartTrainLine(selectedTrainIdData, true, true, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
    	});
	}
	
	function LoadDropDownFromCSV()
	{
		var trainTypeArr = [];
		
		d3.csv("PlottingDataDROP.csv", function(error, data) {
			
			data.forEach(function(d){
				trainTypeArr.push(d.traintype);
			});
		
		var uniqueTrainTypeArr =d3.set(trainTypeArr).values();
			
		d3.select("#selectTrainType")
      		.selectAll('option')
     		.data(uniqueTrainTypeArr)
      		.enter()
    		.append('option')
      		.text(function (d) { return d; }) // text showed in the menu
      		.attr("value", function (d) { return d; }); // corresponding value returned by the button
			
		// When the button is changed, run the updateChart function
    	d3.select("#selectTrainType").on("change", function(d) {
        	// recover the option that has been chosen
        	var selectedOption = d3.select(this).property("value");
        	// run the updateChart function with this selected option
        	//update(selectedOption)
    	});
	});
	}
	
	function btnLoadTwoCSVFilesClick(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale)
	{
		removePolyline();
		d3.select("#btnLoadTwoCSVFiles").remove();
		
		var fileNames =[{"name":"PlottingData165196.csv" }, {"name": "PlottingData165180.csv"}];
		var p=0;
		
		for(var i=0;i<fileNames.length;i++){
		
        d3.csv(fileNames[i].name, function(error, currentData) {
			var keyValueData = [{"key": fileNames[p].name, "values":currentData}];
			
			keyValueData[0].values.sort(function(a, b) {
                    return d3.ascending(+a.arrivaltime, +b.arrivaltime);
                });
                    
                keyValueData[0].values.forEach(function(d) {
                   // alert(formatSeconds(d.arrivaltime))
                   // alert(secondsToHms(d.arrivaltime))
                    d.atinsec=d.arrivaltime;
                    d.dtinsec=d.departuretime;

                    d.dayofrun1=Math.abs((Math.abs(d.arrivaltime/86400))+1);
                    d.dayofrun2=Math.floor((Math.abs(d.departuretime/86400))+1);
                    //distanceArr.push(d.distance);
                    d.distance = parseFloat(d.distance);
                    //stationCode.push(d.stationcode);				
                    //arravalTimeSecArr.push(d.arrivaltime);
                    //departureTimeSecArr.push(d.departuretime);
                    d.arrivaltime = d3.timeParse("%I:%M")(secondsToHms(d.arrivaltime));		
                    //d.arrivaltime= d3.timeParse("%I:%M")(secondsToHms(d.arrivaltime>86400? d.arrivaltime-86400:d.arrivaltime));
                    d.departuretime = d3.timeParse("%I:%M")(secondsToHms(d.departuretime));
                    //d.departuretime = d3.timeParse("%I:%M")(secondsToHms(d.departuretime>86400? d.departuretime-86400:d.departuretime));
                    //timeLenghtArr.push(d.arrivaltime);
                    d.trainid = d.trainid;
                    //trainIdArr.push(d.trainid);

                });
               
			loadChartTrainLine(keyValueData[0].values,true, true,  color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
			d3.select("#divColumnLeft").append("button").attr("id", "btnLoadFile" +p).text(keyValueData[0].key)
				.on("click", function(){
					removePolyline();
					loadChartTrainLine(keyValueData[0].values,true, true, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
				});
			p++;
			});
		}	
	}
	
	function btnUpDirectionClick(uniqueTrainIdArr, data, color, allTrainLinesCount,svg, uniqueTrainIdArr, div,yscale)
	{
		removePolyline();
		loadChartTrainLine(data, true, false, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
	}
	
	function  btnDownDirectionClick(uniqueTrainIdArr, data, color, allTrainLinesCount, svg, uniqueTrainIdArr, div,yscale)
	{
		removePolyline();
		loadChartTrainLine(data, false, true, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);
	}
	
    //d3.select("divColumnRight").on("scrroll") = function() { columnRightOnScroll() };
    d3.select("#divColumnRight").on("scroll", function(){
    
        var height = d3.select("#divColumnRight").node().childNodes[0].getAttribute("height");
        
        if(this.scrollTop == 0)
        {
            changeGroupElemntParentElementTransformTranslate("#gxAxisTimeTop", 182, (-height-67));
			changeGroupElemntParentElementTransformTranslate("#gxAxisTimeBottom", 182, (-(height)+this.offsetHeight-150));
			d3.select("#divLeftBottom").node().style.setProperty("transform", "translate(0px," + (-(height)+this.offsetHeight-50)+"px)");
			d3.select("#divRightBottom").node().style.setProperty("transform", "translate("+(this.offsetWidth-105)+"px," + (-(height)+this.offsetHeight-50)+"px)");
			d3.select("#divRightTop").node().style.setProperty("transform", "translate("+(this.offsetWidth-105)+"px," + (-height+2)+"px)");

            if (this.scrollLeft > 80) 
            {
                changeGroupElemntParentElementTransformTranslate("#gyAxisDistance", this.scrollLeft, (-height-176));
				changeGroupElemntParentElementTransformTranslate("#gyAxisDistanceDifferenceRight", this.scrollLeft + (this.offsetWidth-295), (-height-176));
                
                if(this.scrollLeft > 80)
                {
                    changeGroupElemntParentElementTransformTranslate("#gyAxisstationcode", this.scrollLeft, (-height-184));
					changeGroupElemntParentElementTransformTranslate("#gyAxisStationCodeRigth", this.scrollLeft + (this.offsetWidth-295), (-height-184));
                }
            }
            
            if (this.scrollLeft < 80) 
            {
                changeGroupElemntParentElementTransformTranslate("#gyAxisDistance", this.scrollLeft, (-height-176));
				changeGroupElemntParentElementTransformTranslate("#gyAxisDistanceDifferenceRight", this.scrollLeft + (this.offsetWidth-295), (-height-176));
                
                changeGroupElemntParentElementTransformTranslate("#gyAxisstationcode", this.scrollLeft, (-height-184));
				changeGroupElemntParentElementTransformTranslate("#gyAxisStationCodeRigth", this.scrollLeft + (this.offsetWidth-295), (-height-184));
            }
            
            if(this.scrollLeft == 0)
            {
                changeGroupElemntParentElementTransformTranslate("#gyAxisDistance", 0, (-height-176));
                if(this.scrollLeft == 0)
                {
                    changeGroupElemntParentElementTransformTranslate("#gyAxisstationcode", -5, (-height-184));
                }
            }
        }
        
         if (this.scrollTop > 0) 
        {
            changeGroupElemntParentElementTransformTranslate("#gxAxisTimeTop", 182, (-height+this.scrollTop-70));
			changeGroupElemntParentElementTransformTranslate("#gxAxisTimeBottom", 182, (-(height)+this.scrollTop+this.offsetHeight-150));
			d3.select("#divLeftBottom").node().style.setProperty("transform", "translate(0px," + (-(height)+this.offsetHeight-50)+"px)");
			
			d3.select("#divRightBottom").node().style.setProperty("transform", "translate("+(this.offsetWidth-105)+"px," + (-(height)+this.offsetHeight-50)+"px)");
			d3.select("#divRightTop").node().style.setProperty("transform", "translate("+(this.offsetWidth-105)+"px," + (-height+2)+"px)");
			
            if (this.scrollLeft > 80) 
            {
                changeGroupElemntParentElementTransformTranslate("#gyAxisDistance", this.scrollLeft, (-height-176));
                changeGroupElemntParentElementTransformTranslate("#gyAxisDistanceDifferenceRight", this.scrollLeft + (this.offsetWidth-295), (-height-76));
                if(this.scrollLeft > 80)
                {
                    changeGroupElemntParentElementTransformTranslate("#gyAxisstationcode", this.scrollLeft, (-height-184));
					changeGroupElemntParentElementTransformTranslate("#gyAxisStationCodeRigth", this.scrollLeft + (this.offsetWidth-295), (-height-184));
                }
            }
            
            if (this.scrollLeft < 80) 
            {
                changeGroupElemntParentElementTransformTranslate("#gyAxisDistance", this.scrollLeft, (-height-176));
                changeGroupElemntParentElementTransformTranslate("#gyAxisDistanceDifferenceRight", this.scrollLeft + (this.offsetWidth-295), (-height-176));
                
				changeGroupElemntParentElementTransformTranslate("#gyAxisstationcode", this.scrollLeft, (-height-184));
				changeGroupElemntParentElementTransformTranslate("#gyAxisStationCodeRigth", this.scrollLeft + (this.offsetWidth-295), (-height-184));
            }
            
            if(this.scrollLeft == 0)
            {
                changeGroupElemntParentElementTransformTranslate("#gyAxisDistance", 0, (-height-176));
                if(this.scrollLeft == 0)
                {
                    changeGroupElemntParentElementTransformTranslate("#gyAxisstationcode", -5, (-height-184));
                }
            }
        } 
    });
	
//Functions to create UI
	function createLabelAndDropDownForTrainId()
	{
		d3.select("#divColumnLeft").append("label").attr("id", "lblTrainId").attr("for", "trainid").text("Train Id:  ");
		d3.select("#divColumnLeft").append("select").attr("id", "selectTrainId").attr("name", "trainid");
	}
	
	function createLabelAndDropDownForTrainType()
	{
		d3.select("#divColumnLeft").append("label").attr("id", "lblTrainType")
		.attr("for", "trainType").text("Train Type:  ").style("display", "inline-table");
		d3.select("#divColumnLeft").append("select").attr("id", "selectTrainType").attr("name", "trainType");
	}
	
	function createButtonLoadTwoCSVFiles(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale)
	{
		d3.select("#divColumnLeft").append("button").attr("id", "btnLoadTwoCSVFiles").text("Load Two CSV Files")
			.on("click", function(){btnLoadTwoCSVFilesClick(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);});
	}
	
	function createButtonUpDirection(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale)
	{
		d3.select("#divColumnLeft").append("button").attr("id", "btnUpDirection").text("Up Direction")
			.on("click", function(){btnUpDirectionClick(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);});
	}
	
	function createButtonDownDirection(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale)
	{
		d3.select("#divColumnLeft").append("button").attr("id", "btnDownDirection").text("Down Direction")
			.on("click", function(){btnDownDirectionClick(uniqueTrainIdArr, data, color, allTrainLinesCount,  svg, uniqueTrainIdArr, div,yscale);});
	}
	
	function createTextForPolyline(yscale, data, svg)
		{  
			var xscale =  d3
            .scaleLinear()
            .domain([00, 86400])
            .range([0, 2880]);
			var days = 1;

				svg.selectAll(null)
				 .data(data)
				    .enter()
					.append("g")
				    .append("text")
				    .attr("x",  function (d) {if(days==d.dayofrun2)
                {
                     return xscale(d.atinsec%86400); }
					else
				{
					return xscale(d.atinsec%88400);
				days = days+1;}
				
				})
				   .attr("y", function (d) { return yscale(d.distance); })
				    
					.attr("transform", "translate(194, 10)")
				    .attr("fill", "red").text(function (d, i) {
                return (Math.floor(d.atinsec % 3600 / 60));			//only get minutes from seconds
            });
			
			svg.selectAll(null)
				 .data(data)
				    .enter()
					.append("g")
				    .append("text")
				    .attr("x",  function (d) {if(days==d.dayofrun2)
                {
                     return xscale(d.dtinsec%86400); }
					else
				{
					return xscale(d.dtinsec%88400);
				days = days+1;}
				
				})
				   .attr("y", function (d) { return yscale(d.distance); })
				    
					.attr("transform", "translate(210, 10)")
				    .attr("fill", "red").text(function (d, i) {
                return (Math.floor(d.dtinsec % 3600 / 60));			//only get minutes from seconds
            });
        }
		
	function removeTextForPolyLine()
	{
		d3.select("#divColumnRight").select("svg").selectAll("g").selectAll("text").remove();
	}
		
	function removePolyline()
	{
		d3.select("#divColumnRight").selectAll("polyline").remove();
	}